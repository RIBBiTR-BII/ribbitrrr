% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/db_maintenance.r
\name{db_rows_insert}
\alias{db_rows_insert}
\alias{db_rows_update}
\alias{db_rows_upsert}
\alias{db_rows_delete}
\title{This set of functions support the modification of tables in a remote database .}
\usage{
db_rows_insert(dbcon, reference_table, modified_data, by, silent_null = TRUE)

db_rows_update(dbcon, reference_table, modified_data, by, silent_null = TRUE)

db_rows_upsert(dbcon, reference_table, modified_data, by)

db_rows_delete(dbcon, reference_table, modified_data, by, silent_null = TRUE)
}
\arguments{
\item{dbcon}{Database connection (A valid and active DBI database connection object)}

\item{reference_table}{A table pointer object pointing to the database table which you want to modify.}

\item{by}{column name(s) for primary key by which to join novel data with reference table}

\item{silent_null}{boolean: do you want to silently skip the operation if there are no rows in the passed dataframe (TRUE by default, otherwise throws a warning)}

\item{novel_data}{Data Frame of rows to be pushed to the database}
}
\value{
An updated table pointer object (for future use).
}
\description{
This set of functions allow you to modify a remote database table by first pushing new data to a temporary table with \link[ribbitrrr]{stage_to_temp}, then maiking use of the corresponding \link[dplyr]{rows} functions.
\itemize{
\item db_rows_insert(dbcon, reference_table, novel_data, pkey)
\item db_rows_update(dbcon, reference_table, novel_data, pkey)
\item db_rows_upsert(dbcon, reference_table, novel_data, pkey)
\item db_rows_delete(dbcon, reference_table, novel_data, pkey)
}
}
\examples{
if(FALSE) {
  dbcon = HopToDB("ribbitr")
  db_capture = dplyr::tbl(dbcon, "capture")
  db_capture = db_rows_upsert(dbcon, db_capture, novel_capture, "capture_id")
}
}
